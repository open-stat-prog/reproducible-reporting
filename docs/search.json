[
  {
    "objectID": "quizzes/first_tutorial/questions/default_arguments1.html",
    "href": "quizzes/first_tutorial/questions/default_arguments1.html",
    "title": "Question",
    "section": "",
    "text": "Which section of an R package help file would you reference to learn the default values for a function’s arguments.\n\n\n\nDescription\nUsage\nArguments\nDetails\nValue\nSee Also\nExamples"
  },
  {
    "objectID": "quizzes/first_tutorial/questions/default_arguments1.html#answerlist",
    "href": "quizzes/first_tutorial/questions/default_arguments1.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "Description\nUsage\nArguments\nDetails\nValue\nSee Also\nExamples"
  },
  {
    "objectID": "quizzes/first_tutorial/index.html",
    "href": "quizzes/first_tutorial/index.html",
    "title": "Knowledge Quiz: Tutorial 2",
    "section": "",
    "text": "Note\n\n\n\n\nClick the check-mark button to check your answer.\nClick the question-mark button to see an explanation of the solution.\n\n\n\n Back to top"
  },
  {
    "objectID": "quizzes/second_tutorial/questions/logical.html",
    "href": "quizzes/second_tutorial/questions/logical.html",
    "title": "Question",
    "section": "",
    "text": "Which of the following expressions will return TRUE?\n\n\n\n\"foo\" != \"bar\"\n(8 + 6) &lt; (8 * 6)\n(8 - 1) == 7 & 7 &gt;= (14 / 2)\n\"alice\" == \"bob\" | \"alice\" == \"alice\"\n!(6 &gt; 7)\nTRUE\nFALSE\n\"foo\" == \"bar\"\n(8 - 1) == 7 & 7 &gt; (14 / 2)\n\"alice\" == \"bob\" | \"alice\" != \"alice\"\n\"alice\" == \"bob\" & \"alice\" == \"alice\"\n!TRUE\nTRUE & FALSE"
  },
  {
    "objectID": "quizzes/second_tutorial/questions/logical.html#answerlist",
    "href": "quizzes/second_tutorial/questions/logical.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "\"foo\" != \"bar\"\n(8 + 6) &lt; (8 * 6)\n(8 - 1) == 7 & 7 &gt;= (14 / 2)\n\"alice\" == \"bob\" | \"alice\" == \"alice\"\n!(6 &gt; 7)\nTRUE\nFALSE\n\"foo\" == \"bar\"\n(8 - 1) == 7 & 7 &gt; (14 / 2)\n\"alice\" == \"bob\" | \"alice\" != \"alice\"\n\"alice\" == \"bob\" & \"alice\" == \"alice\"\n!TRUE\nTRUE & FALSE"
  },
  {
    "objectID": "quizzes/second_tutorial/questions/logical.html#answerlist-1",
    "href": "quizzes/second_tutorial/questions/logical.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nTRUE: “foo” is not equal to “bar”\nTRUE: 14 is strictly less than 48\nTRUE: 7 is equal to 7, and 7 is greater than or equal to 7\nTRUE: “alice” is not equal to “bob”, but “alice is equal to”alice”\nTRUE: 6 is not strictly greater than 7, and that result is negated\nTRUE: Trivially\nFALSE: Trivially\nFALSE: “foo” is not equal to “bar”\nFALSE: 7 is equal to 7, but 7 is not strictly greater than 7\nFALSE: “alice” is not equal to “bob”, and “alice” is equal to “alice”\nFALSE: “alice” is not equal to “bob”\nFALSE: Trivial negation\nFALSE: Trivially"
  },
  {
    "objectID": "quizzes/second_tutorial/index.html",
    "href": "quizzes/second_tutorial/index.html",
    "title": "Knowledge Quiz: Tutorial 1",
    "section": "",
    "text": "Note\n\n\n\n\nClick the check-mark button to check your answer.\nClick the question-mark button to see an explanation of the solution.\n\n\n\n Back to top"
  },
  {
    "objectID": "tutorials/chunk_options/chunk_options.html",
    "href": "tutorials/chunk_options/chunk_options.html",
    "title": "Second Topic",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\nNunc ac dignissim magna. Vestibulum vitae egestas elit. Proin feugiat leo quis ante condimentum, eu ornare mauris feugiat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris cursus laoreet ex, dignissim bibendum est posuere iaculis. Suspendisse et maximus elit. In fringilla gravida ornare. Aenean id lectus pulvinar, sagittis felis nec, rutrum risus. Nam vel neque eu arcu blandit fringilla et in quam. Aliquam luctus est sit amet vestibulum eleifend. Phasellus elementum sagittis molestie. Proin tempor lorem arcu, at condimentum purus volutpat eu. Fusce et pellentesque ligula. Pellentesque id tellus at erat luctus fringilla. Suspendisse potenti.\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Chunks and options",
      "Second Topic"
    ]
  },
  {
    "objectID": "tutorials/chunk_options/code_chunks.html",
    "href": "tutorials/chunk_options/code_chunks.html",
    "title": "First Topic",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.",
    "crumbs": [
      "Open-Stat-Prog",
      "Chunks and options",
      "First Topic"
    ]
  },
  {
    "objectID": "tutorials/chunk_options/code_chunks.html#blah",
    "href": "tutorials/chunk_options/code_chunks.html#blah",
    "title": "First Topic",
    "section": "Blah",
    "text": "Blah\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\nNunc ac dignissim magna. Vestibulum vitae egestas elit. Proin feugiat leo quis ante condimentum, eu ornare mauris feugiat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris cursus laoreet ex, dignissim bibendum est posuere iaculis. Suspendisse et maximus elit. In fringilla gravida ornare. Aenean id lectus pulvinar, sagittis felis nec, rutrum risus. Nam vel neque eu arcu blandit fringilla et in quam. Aliquam luctus est sit amet vestibulum eleifend. Phasellus elementum sagittis molestie. Proin tempor lorem arcu, at condimentum purus volutpat eu. Fusce et pellentesque ligula. Pellentesque id tellus at erat luctus fringilla. Suspendisse potenti.",
    "crumbs": [
      "Open-Stat-Prog",
      "Chunks and options",
      "First Topic"
    ]
  },
  {
    "objectID": "tutorials/presenting_output/tables.html",
    "href": "tutorials/presenting_output/tables.html",
    "title": "Code Blocks",
    "section": "",
    "text": "This is the first topic file for Tutorial 1.",
    "crumbs": [
      "Open-Stat-Prog",
      "Presenting output",
      "Code Blocks"
    ]
  },
  {
    "objectID": "tutorials/presenting_output/tables.html#code-blocks",
    "href": "tutorials/presenting_output/tables.html#code-blocks",
    "title": "Code Blocks",
    "section": "Code Blocks",
    "text": "Code Blocks\nUse knitr code blocks to include non-interactive R code.\n\n## Add 2 and 2\n2 + 2\n\n[1] 4\n\n## Divide 225 by 15 and print the result\n(x &lt;- 225 / 15)\n\n[1] 15\n\n\nUse quarto-webr code blocks for interactive R exercises.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCode Block Environments\nA single execution environment is shared across code blocks of the same type.\n\nAll the knitr code blocks in a QMD file will share an evaluation environment.\nLikewise for the quarto-webr code blocks\n\n\nx^2\n\n[1] 225\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nknitr and quarto-webr code blocks to not share the same environment, though.\n\nresid(fit)\n\nError: object 'fit' not found\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf you want to share objects across code chunk types (e.g., to pose a practice problem using objects created in a knitr chunk), you can regenerate the required objects using a hidden code chunk of the appropriate type.\n\nDon’t forget to set an appropriate seed, if you’re trying to regenerate a stochastic object.\n\n\n\nInline Code\nUse knitr inline code chunks to embed R output in text blocks.\n\nE.g., R says the squareroot of 2 is 1.4142136.",
    "crumbs": [
      "Open-Stat-Prog",
      "Presenting output",
      "Code Blocks"
    ]
  },
  {
    "objectID": "tutorials/presenting_output/plots.html",
    "href": "tutorials/presenting_output/plots.html",
    "title": "Divs & Callouts",
    "section": "",
    "text": "This is the second topic file for Tutorial 1.",
    "crumbs": [
      "Open-Stat-Prog",
      "Presenting output",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/presenting_output/plots.html#callout-blocks",
    "href": "tutorials/presenting_output/plots.html#callout-blocks",
    "title": "Divs & Callouts",
    "section": "Callout Blocks",
    "text": "Callout Blocks\nUse callout blocks to highlight special information.\n\n\n\n\n\n\nNote Title\n\n\n\nSomething noteworthy.\n\n\n\n\n\n\n\n\nTip Title\n\n\n\nHere’s a tip for ya…\n\n\n\n\n\n\n\n\nImportant Title\n\n\n\nThis is very important!\n\n\n\n\n\n\n\n\nWarning Title\n\n\n\nYou’ve been warned.\n\n\n\n\n\n\n\n\nCaution Title\n\n\n\nProceed with caution.\n\n\n\nCustom Callouts\nThis project uses the quarto-custom-callout extension to provide some bespoke callout blocks. This template already defines four such blocks.\nA reading callout to highlight relevant, recommended literature.\n\nI.e., These sources would be the required reading in a classroom context.\n\n\n\n\n\n\n\nReading\n\n\n\nR4DS 2: Workflow Basics\n\n\nA reading-advanced callout to highlight relevant, but technically challanging, literature.\n\nI.e., These sources would be supplementary reference materials but not required reading in a classroom context.\n\n\n\n\n\n\n\nAdvanced Reading\n\n\n\nAdvanced R 2.2: Binding Basics\n\n\nA resource callout to highlight related external resources.\n\n\n\n\n\n\nExternal Resources\n\n\n\nFor a different take on these ideas, check out Andrew Heiss’ R Primers tutorial on the topic\n\nR Primers: Programming Basics\n\n\n\n\n\nPractice Callouts\nThe custom practice callout is reserved for inline practice problems.\n\nThe panel-tabset div nested within the practice div creates a set of tabs to organize the exercise components.\nEach Level 2 heading inside the panel-tabset div defines a new tab.\n\nIn the examples below, the tab titles are specified through quarto shortcode variables.\nThese variables are defined in the _variables.yml metadata file.\n\n\n\n\n\n\n\n\nExample Code Exercise\n\n\n\n\nRegress Petal.Width onto Species using the iris dataset.\nCreate a normal Q-Q plot of the residuals.\n\n\n Interactive Editor Hint Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRemember what happens when you call the Base R plot() function on a fitted lm object.\n\n\n\nFirst, we’ll use the lm() function to estimate the model.\n\n\nfit1 &lt;- lm(Petal.Width ~ Species, data = iris)\n\n\nThen, we’ll use the default plotting method for lm objects to create the Q-Q plot.\n\n\nplot(fit1, 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Theory Question\n\n\n\n\n Question Solution\n\n\nWhat is the answer to life, the universe, and everything?\n\n\n42",
    "crumbs": [
      "Open-Stat-Prog",
      "Presenting output",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/presenting_output/plots.html#using-the-website-margin",
    "href": "tutorials/presenting_output/plots.html#using-the-website-margin",
    "title": "Divs & Callouts",
    "section": "Using the Website Margin",
    "text": "Using the Website Margin\nIn the previous section, all callout blocks are placed in the website body. In most cases, however, callout blocks are better placed in the website margin.\n\nPlacing supporting elements like links, callouts, and references in the margin streamlines the main body content while keeping the supporting information near the relevant main body content.\n\nTo place content in the website margine, we use the column-margin div.\n\nExample\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi gravida bibendum ex, quis cursus risus vestibulum vel. Aliquam hendrerit in enim in suscipit. Nunc at fringilla velit, a faucibus tellus. Etiam mollis, massa id finibus volutpat, tellus nulla egestas mauris, id tempus sem ipsum quis neque. Pellentesque sodales pharetra nulla id sodales. Vestibulum tincidunt orci in sem malesuada, in malesuada odio lacinia. Integer sodales, quam eu imperdiet commodo, est ipsum interdum risus, et volutpat mi justo blandit est. Donec non nisl lobortis, vestibulum lorem non, iaculis felis. Curabitur tempus sagittis volutpat. Nam dignissim eros ac gravida ultricies. Curabitur velit nisl, cursus in lobortis id, porttitor in massa. Vestibulum commodo, turpis vitae laoreet efficitur, diam sem consectetur felis, non pulvinar magna elit id justo. Duis tincidunt id massa eget lacinia.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n\nNam vulputate tellus metus, id pretium nisi congue eu. Ut ornare, sem id cursus suscipit, dui purus efficitur urna, id auctor magna diam quis lorem. Cras venenatis id dui at rhoncus. Donec consequat nulla vel arcu vestibulum, ac posuere leo venenatis. Praesent fermentum est ac lorem condimentum, gravida volutpat velit sagittis. Cras ac egestas nisi. Duis eget luctus quam. Donec consectetur neque nec egestas ultricies.\n\n\n\n\n\n\n\n\n\n\nExternal Resources\n\n\n\nWikipedia: Central Limit Theorem",
    "crumbs": [
      "Open-Stat-Prog",
      "Presenting output",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/writing_text/text.html",
    "href": "tutorials/writing_text/text.html",
    "title": "Code Blocks",
    "section": "",
    "text": "This is the first topic file for Tutorial 1.",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Code Blocks"
    ]
  },
  {
    "objectID": "tutorials/writing_text/text.html#code-blocks",
    "href": "tutorials/writing_text/text.html#code-blocks",
    "title": "Code Blocks",
    "section": "Code Blocks",
    "text": "Code Blocks\nUse knitr code blocks to include non-interactive R code.\n\n## Add 2 and 2\n2 + 2\n\n[1] 4\n\n## Divide 225 by 15 and print the result\n(x &lt;- 225 / 15)\n\n[1] 15\n\n\nUse quarto-webr code blocks for interactive R exercises.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCode Block Environments\nA single execution environment is shared across code blocks of the same type.\n\nAll the knitr code blocks in a QMD file will share an evaluation environment.\nLikewise for the quarto-webr code blocks\n\n\nx^2\n\n[1] 225\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nknitr and quarto-webr code blocks to not share the same environment, though.\n\nresid(fit)\n\nError: object 'fit' not found\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf you want to share objects across code chunk types (e.g., to pose a practice problem using objects created in a knitr chunk), you can regenerate the required objects using a hidden code chunk of the appropriate type.\n\nDon’t forget to set an appropriate seed, if you’re trying to regenerate a stochastic object.\n\n\n\nInline Code\nUse knitr inline code chunks to embed R output in text blocks.\n\nE.g., R says the squareroot of 2 is 1.4142136.",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Code Blocks"
    ]
  },
  {
    "objectID": "tutorials/writing_text/inline_code.html",
    "href": "tutorials/writing_text/inline_code.html",
    "title": "Images & Figures",
    "section": "",
    "text": "This is the third topic file for Tutorial 1.\narrange() orders the rows of a data frame by the values of selected columns.\nUnlike other dplyr verbs, arrange() largely ignores grouping; you need to explicitly mention grouping\n    variables (or use  .by_group = TRUE) in order to group by them, and functions of variables are\n    evaluated once per data frame, not once per group.\nUnlike base sorting with sort(), NA are:\nAn object of the same type as .data. The output has the following properties:\nThis function is a generic, which means that packages can provide implementations (methods) for\n    other classes. See the documentation of individual methods for extra arguments and differences in behaviour.\nThe following methods are currently available in loaded packages: no methods found.\nOther single table verbs: \n    filter(),\n    mutate(),\n    reframe(),\n    rename(),\n    select(),\n    slice(),\n    summarise()",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/writing_text/inline_code.html#assets-directory",
    "href": "tutorials/writing_text/inline_code.html#assets-directory",
    "title": "Images & Figures",
    "section": "Assets Directory",
    "text": "Assets Directory\nAll pre-rendered assets (i.e., files that will not rendered/compiled into some other format) that you want to include in your website should live somewhere in the “/assets/” directory.\n\n/assets/images/: Image files\n/assets/figures/: Scientific figures (e.g., graphs, plots, diagrams)\n/assets/docs/: Pre-rendered documents (e.g., HTML)",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/writing_text/inline_code.html#images",
    "href": "tutorials/writing_text/inline_code.html#images",
    "title": "Images & Figures",
    "section": "Images",
    "text": "Images\n\n\n\nA Nice Mountain View",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/writing_text/inline_code.html#figures",
    "href": "tutorials/writing_text/inline_code.html#figures",
    "title": "Images & Figures",
    "section": "Figures",
    "text": "Figures\n\n\n\nSerial Multiple Mediation",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/writing_text/inline_code.html#documents",
    "href": "tutorials/writing_text/inline_code.html#documents",
    "title": "Images & Figures",
    "section": "Documents",
    "text": "Documents\nInclude a pre-rendered HTML files as part of this webpage.\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  \n\n\n\narrange {dplyr}\nR Documentation\n\n\n\n\n\n  Order rows using column values\n\n  Description\n\n  \n  \n\n  Usage\n\n  arrange(.data, ..., .by_group = FALSE)\n\n## S3 method for class 'data.frame'\narrange(.data, ..., .by_group = FALSE, .locale = NULL)\n\n  Arguments\n\n  \n\n\n\n\n\n\n\n.data\nA data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.\n\n\n...\n&lt;data-masking&gt; Variables, or functions of variables. Use desc() to sort a variable in descending order.\n\n\n.by_group\nIf TRUE, will sort first by grouping variable. Applies togrouped data frames only.\n\n\n.locale\nThe locale to sort character vectors in.\n\nIf NULL, the default, uses the \"C\" locale unless the dplyr.legacy_locale global option escape hatch is active. See the dplyr-locale help page for more details.\nIf a single string from stringi::stri_locale_list() is supplied, then this will be used as the locale to sort with. For example, \"en\" will sort with the American English locale. This requires the stringi package.\nIf \"C\" is supplied, then character vectors will always be sorted in the C locale. This does not require stringi and is often much faster than supplying a locale identifier.\n\nThe C locale is not the same as English locales, such as \"en\", particularly when it comes to data containing a mix of upper and lower case letters. This is explained in more detail on the locale help page under the ⁠Default locale⁠ section.\n\n\n\n\n\n  Details\n\n  Missing values\n\n  \n\n  \n    \n       always sorted to the end for local data, even when wrapped with desc().\n    \n    \n       treated differently for remote data, depending on the backend.\n    \n  \n\n  Value\n\n  \n\n  \n    \n       All rows appear in the output, but (usually) in a different place.\n    \n    \n       Columns are not modified.\n    \n    \n       Groups are not modified.\n    \n    \n       Data frame attributes are preserved.\n    \n  \n\n  Methods\n\n  \n  \n\n  See Also\n\n  \n\n  Examples\n\n  arrange(mtcars, cyl, disp)\narrange(mtcars, desc(disp))\n\n# grouped arrange ignores groups\nby_cyl &lt;- mtcars %&gt;% group_by(cyl)\nby_cyl %&gt;% arrange(desc(wt))\n# Unless you specifically ask:\nby_cyl %&gt;% arrange(desc(wt), .by_group = TRUE)\n\n# use embracing when wrapping in a function;\n# see ?rlang::args_data_masking for more details\ntidy_eval_arrange &lt;- function(.data, var) {\n  .data %&gt;%\n    arrange({{ var }})\n}\ntidy_eval_arrange(mtcars, mpg)\n\n# Use `across()` or `pick()` to select columns with tidy-select\niris %&gt;% arrange(pick(starts_with(\"Sepal\")))\niris %&gt;% arrange(across(starts_with(\"Sepal\"), desc))",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/quarto_markdown/differences.html",
    "href": "tutorials/quarto_markdown/differences.html",
    "title": "Differences between Quarto and Markdown",
    "section": "",
    "text": "While Markdown and Quarto are closely related, they operate at different conceptual levels. Markdown is a markup language, a way of writing text that includes lightweight formatting instructions. It allows authors to create structured documents using plain text syntax for elements such as headings, lists, and emphasis. However, Markdown by itself does not support code execution, metadata, or dynamic output. It is ideal for writing static content like documentation or notes but lacks the ability to combine text with live results or automated analysis.\nQuarto, by contrast, is a document generation and publishing framework that builds on Markdown. It extends Markdown’s simple syntax with tools for executing embedded R code, managing metadata, styling, and rendering outputs to multiple formats such as HTML, PDF, and slides. In practice, this means that Markdown provides the structure, while Quarto provides the workflow — handling the integration between narrative, computation, and presentation. For students working with R, Quarto enables reproducible reporting where statistical results and visualizations are generated automatically from the underlying code, ensuring accuracy and consistency across analyses.\n\n\n\n\n\n\n\n\nLayer\nExample\nPurpose\n\n\n\n\nLanguage layer\nMarkdown\nProvide the text structure, document content, and basic formatting syntax.\n\n\nProcessing layer\nQuarto\nInterpret Markdown, integrate executable R code, and render the combined text and results into polished output formats such as HTML or PDF.\n\n\nComputation layer\nR (and optionally Python, Julia)\nPerform statistical analysis, generate tables and plots, and supply dynamic results that are embedded into the rendered document.\n\n\n\nRStudio provides an integrated environment where Markdown, Quarto, and R work together to support reproducible and dynamic report writing. In this workflow, Markdown serves as the language for structuring text and formatting documents, while Quarto functions as the publishing framework that interprets Markdown, executes embedded R code, and converts the combined content into professional outputs such as reports, presentations, or dashboards. R supplies the computational layer, performing statistical analyses, generating visualizations, and producing results that are automatically incorporated into the final document. Together, these tools allow students to write, analyze, and present their work within a single, seamless system inside RStudio.\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Quarto and Markdown",
      "Differences between Quarto and Markdown"
    ]
  },
  {
    "objectID": "tutorials/quarto_markdown/index.html",
    "href": "tutorials/quarto_markdown/index.html",
    "title": "Quarto and Markdown",
    "section": "",
    "text": "This tutorial introduces Quarto and Markdown.\n\nIt starts with explaining for what purposes Quarto and Markdown can be used.\nNext, it focuses more explicitly on the differences between Quarto and Markdown.\nFinally, different documents that can be created with Quarto are introduced. Here, concrete examples of written documents and presentations are given.\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Quarto and Markdown"
    ]
  },
  {
    "objectID": "tutorials/quarto_markdown/topic2.html",
    "href": "tutorials/quarto_markdown/topic2.html",
    "title": "Divs & Callouts",
    "section": "",
    "text": "This is the second topic file for Tutorial 1."
  },
  {
    "objectID": "tutorials/quarto_markdown/topic2.html#callout-blocks",
    "href": "tutorials/quarto_markdown/topic2.html#callout-blocks",
    "title": "Divs & Callouts",
    "section": "Callout Blocks",
    "text": "Callout Blocks\nUse callout blocks to highlight special information.\n\n\n\n\n\n\nNote Title\n\n\n\nSomething noteworthy.\n\n\n\n\n\n\n\n\nTip Title\n\n\n\nHere’s a tip for ya…\n\n\n\n\n\n\n\n\nImportant Title\n\n\n\nThis is very important!\n\n\n\n\n\n\n\n\nWarning Title\n\n\n\nYou’ve been warned.\n\n\n\n\n\n\n\n\nCaution Title\n\n\n\nProceed with caution.\n\n\n\nCustom Callouts\nThis project uses the quarto-custom-callout extension to provide some bespoke callout blocks. This template already defines four such blocks.\nA reading callout to highlight relevant, recommended literature.\n\nI.e., These sources would be the required reading in a classroom context.\n\n\n\n\n\n\n\nReading\n\n\n\nR4DS 2: Workflow Basics\n\n\nA reading-advanced callout to highlight relevant, but technically challanging, literature.\n\nI.e., These sources would be supplementary reference materials but not required reading in a classroom context.\n\n\n\n\n\n\n\nAdvanced Reading\n\n\n\nAdvanced R 2.2: Binding Basics\n\n\nA resource callout to highlight related external resources.\n\n\n\n\n\n\nExternal Resources\n\n\n\nFor a different take on these ideas, check out Andrew Heiss’ R Primers tutorial on the topic\n\nR Primers: Programming Basics\n\n\n\n\n\nPractice Callouts\nThe custom practice callout is reserved for inline practice problems.\n\nThe panel-tabset div nested within the practice div creates a set of tabs to organize the exercise components.\nEach Level 2 heading inside the panel-tabset div defines a new tab.\n\nIn the examples below, the tab titles are specified through quarto shortcode variables.\nThese variables are defined in the _variables.yml metadata file.\n\n\n\n\n\n\n\n\nExample Code Exercise\n\n\n\n\nRegress Petal.Width onto Species using the iris dataset.\nCreate a normal Q-Q plot of the residuals.\n\n\n Interactive Editor Hint Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRemember what happens when you call the Base R plot() function on a fitted lm object.\n\n\n\nFirst, we’ll use the lm() function to estimate the model.\n\n\nfit1 &lt;- lm(Petal.Width ~ Species, data = iris)\n\n\nThen, we’ll use the default plotting method for lm objects to create the Q-Q plot.\n\n\nplot(fit1, 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Theory Question\n\n\n\n\n Question Solution\n\n\nWhat is the answer to life, the universe, and everything?\n\n\n42"
  },
  {
    "objectID": "tutorials/quarto_markdown/topic2.html#using-the-website-margin",
    "href": "tutorials/quarto_markdown/topic2.html#using-the-website-margin",
    "title": "Divs & Callouts",
    "section": "Using the Website Margin",
    "text": "Using the Website Margin\nIn the previous section, all callout blocks are placed in the website body. In most cases, however, callout blocks are better placed in the website margin.\n\nPlacing supporting elements like links, callouts, and references in the margin streamlines the main body content while keeping the supporting information near the relevant main body content.\n\nTo place content in the website margine, we use the column-margin div.\n\nExample\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi gravida bibendum ex, quis cursus risus vestibulum vel. Aliquam hendrerit in enim in suscipit. Nunc at fringilla velit, a faucibus tellus. Etiam mollis, massa id finibus volutpat, tellus nulla egestas mauris, id tempus sem ipsum quis neque. Pellentesque sodales pharetra nulla id sodales. Vestibulum tincidunt orci in sem malesuada, in malesuada odio lacinia. Integer sodales, quam eu imperdiet commodo, est ipsum interdum risus, et volutpat mi justo blandit est. Donec non nisl lobortis, vestibulum lorem non, iaculis felis. Curabitur tempus sagittis volutpat. Nam dignissim eros ac gravida ultricies. Curabitur velit nisl, cursus in lobortis id, porttitor in massa. Vestibulum commodo, turpis vitae laoreet efficitur, diam sem consectetur felis, non pulvinar magna elit id justo. Duis tincidunt id massa eget lacinia.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n\nNam vulputate tellus metus, id pretium nisi congue eu. Ut ornare, sem id cursus suscipit, dui purus efficitur urna, id auctor magna diam quis lorem. Cras venenatis id dui at rhoncus. Donec consequat nulla vel arcu vestibulum, ac posuere leo venenatis. Praesent fermentum est ac lorem condimentum, gravida volutpat velit sagittis. Cras ac egestas nisi. Duis eget luctus quam. Donec consectetur neque nec egestas ultricies.\n\n\n\n\n\n\n\n\n\n\nExternal Resources\n\n\n\nWikipedia: Central Limit Theorem"
  },
  {
    "objectID": "tutorials/reproducibility/reuse.html",
    "href": "tutorials/reproducibility/reuse.html",
    "title": "Divs & Callouts",
    "section": "",
    "text": "This is the second topic file for Tutorial 1.",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/reuse.html#callout-blocks",
    "href": "tutorials/reproducibility/reuse.html#callout-blocks",
    "title": "Divs & Callouts",
    "section": "Callout Blocks",
    "text": "Callout Blocks\nUse callout blocks to highlight special information.\n\n\n\n\n\n\nNote Title\n\n\n\nSomething noteworthy.\n\n\n\n\n\n\n\n\nTip Title\n\n\n\nHere’s a tip for ya…\n\n\n\n\n\n\n\n\nImportant Title\n\n\n\nThis is very important!\n\n\n\n\n\n\n\n\nWarning Title\n\n\n\nYou’ve been warned.\n\n\n\n\n\n\n\n\nCaution Title\n\n\n\nProceed with caution.\n\n\n\nCustom Callouts\nThis project uses the quarto-custom-callout extension to provide some bespoke callout blocks. This template already defines four such blocks.\nA reading callout to highlight relevant, recommended literature.\n\nI.e., These sources would be the required reading in a classroom context.\n\n\n\n\n\n\n\nReading\n\n\n\nR4DS 2: Workflow Basics\n\n\nA reading-advanced callout to highlight relevant, but technically challanging, literature.\n\nI.e., These sources would be supplementary reference materials but not required reading in a classroom context.\n\n\n\n\n\n\n\nAdvanced Reading\n\n\n\nAdvanced R 2.2: Binding Basics\n\n\nA resource callout to highlight related external resources.\n\n\n\n\n\n\nExternal Resources\n\n\n\nFor a different take on these ideas, check out Andrew Heiss’ R Primers tutorial on the topic\n\nR Primers: Programming Basics\n\n\n\n\n\nPractice Callouts\nThe custom practice callout is reserved for inline practice problems.\n\nThe panel-tabset div nested within the practice div creates a set of tabs to organize the exercise components.\nEach Level 2 heading inside the panel-tabset div defines a new tab.\n\nIn the examples below, the tab titles are specified through quarto shortcode variables.\nThese variables are defined in the _variables.yml metadata file.\n\n\n\n\n\n\n\n\nExample Code Exercise\n\n\n\n\nRegress Petal.Width onto Species using the iris dataset.\nCreate a normal Q-Q plot of the residuals.\n\n\n Interactive Editor Hint Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRemember what happens when you call the Base R plot() function on a fitted lm object.\n\n\n\nFirst, we’ll use the lm() function to estimate the model.\n\n\nfit1 &lt;- lm(Petal.Width ~ Species, data = iris)\n\n\nThen, we’ll use the default plotting method for lm objects to create the Q-Q plot.\n\n\nplot(fit1, 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Theory Question\n\n\n\n\n Question Solution\n\n\nWhat is the answer to life, the universe, and everything?\n\n\n42",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/reuse.html#using-the-website-margin",
    "href": "tutorials/reproducibility/reuse.html#using-the-website-margin",
    "title": "Divs & Callouts",
    "section": "Using the Website Margin",
    "text": "Using the Website Margin\nIn the previous section, all callout blocks are placed in the website body. In most cases, however, callout blocks are better placed in the website margin.\n\nPlacing supporting elements like links, callouts, and references in the margin streamlines the main body content while keeping the supporting information near the relevant main body content.\n\nTo place content in the website margine, we use the column-margin div.\n\nExample\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi gravida bibendum ex, quis cursus risus vestibulum vel. Aliquam hendrerit in enim in suscipit. Nunc at fringilla velit, a faucibus tellus. Etiam mollis, massa id finibus volutpat, tellus nulla egestas mauris, id tempus sem ipsum quis neque. Pellentesque sodales pharetra nulla id sodales. Vestibulum tincidunt orci in sem malesuada, in malesuada odio lacinia. Integer sodales, quam eu imperdiet commodo, est ipsum interdum risus, et volutpat mi justo blandit est. Donec non nisl lobortis, vestibulum lorem non, iaculis felis. Curabitur tempus sagittis volutpat. Nam dignissim eros ac gravida ultricies. Curabitur velit nisl, cursus in lobortis id, porttitor in massa. Vestibulum commodo, turpis vitae laoreet efficitur, diam sem consectetur felis, non pulvinar magna elit id justo. Duis tincidunt id massa eget lacinia.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n\nNam vulputate tellus metus, id pretium nisi congue eu. Ut ornare, sem id cursus suscipit, dui purus efficitur urna, id auctor magna diam quis lorem. Cras venenatis id dui at rhoncus. Donec consequat nulla vel arcu vestibulum, ac posuere leo venenatis. Praesent fermentum est ac lorem condimentum, gravida volutpat velit sagittis. Cras ac egestas nisi. Duis eget luctus quam. Donec consectetur neque nec egestas ultricies.\n\n\n\n\n\n\n\n\n\n\nExternal Resources\n\n\n\nWikipedia: Central Limit Theorem",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/portable.html",
    "href": "tutorials/reproducibility/portable.html",
    "title": "Code Blocks",
    "section": "",
    "text": "This is the first topic file for Tutorial 1.",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Code Blocks"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/portable.html#code-blocks",
    "href": "tutorials/reproducibility/portable.html#code-blocks",
    "title": "Code Blocks",
    "section": "Code Blocks",
    "text": "Code Blocks\nUse knitr code blocks to include non-interactive R code.\n\n## Add 2 and 2\n2 + 2\n\n[1] 4\n\n## Divide 225 by 15 and print the result\n(x &lt;- 225 / 15)\n\n[1] 15\n\n\nUse quarto-webr code blocks for interactive R exercises.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCode Block Environments\nA single execution environment is shared across code blocks of the same type.\n\nAll the knitr code blocks in a QMD file will share an evaluation environment.\nLikewise for the quarto-webr code blocks\n\n\nx^2\n\n[1] 225\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nknitr and quarto-webr code blocks to not share the same environment, though.\n\nresid(fit)\n\nError: object 'fit' not found\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf you want to share objects across code chunk types (e.g., to pose a practice problem using objects created in a knitr chunk), you can regenerate the required objects using a hidden code chunk of the appropriate type.\n\nDon’t forget to set an appropriate seed, if you’re trying to regenerate a stochastic object.\n\n\n\nInline Code\nUse knitr inline code chunks to embed R output in text blocks.\n\nE.g., R says the squareroot of 2 is 1.4142136.",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Code Blocks"
    ]
  },
  {
    "objectID": "in_progress.html",
    "href": "in_progress.html",
    "title": "In Progress",
    "section": "",
    "text": "Sorry, we’re still building the page you’ve requested.\nIt’s almost done…really.\nWe’re just working through a few minor issues…\n\n\n\nImage Source"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible reporting",
    "section": "",
    "text": "Welcome to the Reproducible reporting module. This module consists of a series of tutorials on the following topics:",
    "crumbs": [
      "Open-Stat-Prog",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#learning-goals",
    "href": "index.html#learning-goals",
    "title": "Reproducible reporting",
    "section": "Learning Goals",
    "text": "Learning Goals\nAfter completing this module, you will be able to:\n\nQuarto and markdown\n\nUnderstand the purpose of Markdown and Quarto.\nUnderstand the differences between Markdown and Quarto.\nRecognize the different documents that can be created with Quarto.\n\n\n\nChunks and options\n\nUnderstand what code chuncks are.\nLearn how to create and label R code chunks.\nExplore common chunk options.\n\n\n\nWriting text\n\nLearn how to write plain text and basic Markdown formatting to style text.\nLearn how to apply structure to a document.\nLearn how to include inline code and results within text.\n\n\n\nPresenting output\n\nLearn how to display clean, readable tables.\nUnderstand how to include plots and visualizations.\n\n\n\nPortability and reproducibility\n\nUnderstand what makes Quarto documents portable and reproducible.\nLearn how to reuse content and structure across projects.\nAppreciate the benefits of reproducible workflows.\n\nClick the button below to get started with the first tutorial.\n\n\n Begin Tutorial",
    "crumbs": [
      "Open-Stat-Prog",
      "Overview"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "Conclusion",
    "section": "",
    "text": "Use this page to provide some kind of brief wrap-up.",
    "crumbs": [
      "Open-Stat-Prog",
      "Conclusion"
    ]
  },
  {
    "objectID": "conclusion.html#next-steps",
    "href": "conclusion.html#next-steps",
    "title": "Conclusion",
    "section": "Next Steps",
    "text": "Next Steps\nIf your module feeds naturally into another, link that module through the button below as a suggestion for further study.\n\nHere, we’re linking to the First Steps module.\n\n\n\n Next Module",
    "crumbs": [
      "Open-Stat-Prog",
      "Conclusion"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/workflows.html",
    "href": "tutorials/reproducibility/workflows.html",
    "title": "Images & Figures",
    "section": "",
    "text": "This is the third topic file for Tutorial 1.\narrange() orders the rows of a data frame by the values of selected columns.\nUnlike other dplyr verbs, arrange() largely ignores grouping; you need to explicitly mention grouping\n    variables (or use  .by_group = TRUE) in order to group by them, and functions of variables are\n    evaluated once per data frame, not once per group.\nUnlike base sorting with sort(), NA are:\nAn object of the same type as .data. The output has the following properties:\nThis function is a generic, which means that packages can provide implementations (methods) for\n    other classes. See the documentation of individual methods for extra arguments and differences in behaviour.\nThe following methods are currently available in loaded packages: no methods found.\nOther single table verbs: \n    filter(),\n    mutate(),\n    reframe(),\n    rename(),\n    select(),\n    slice(),\n    summarise()",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/workflows.html#assets-directory",
    "href": "tutorials/reproducibility/workflows.html#assets-directory",
    "title": "Images & Figures",
    "section": "Assets Directory",
    "text": "Assets Directory\nAll pre-rendered assets (i.e., files that will not rendered/compiled into some other format) that you want to include in your website should live somewhere in the “/assets/” directory.\n\n/assets/images/: Image files\n/assets/figures/: Scientific figures (e.g., graphs, plots, diagrams)\n/assets/docs/: Pre-rendered documents (e.g., HTML)",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/workflows.html#images",
    "href": "tutorials/reproducibility/workflows.html#images",
    "title": "Images & Figures",
    "section": "Images",
    "text": "Images\n\n\n\nA Nice Mountain View",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/workflows.html#figures",
    "href": "tutorials/reproducibility/workflows.html#figures",
    "title": "Images & Figures",
    "section": "Figures",
    "text": "Figures\n\n\n\nSerial Multiple Mediation",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/workflows.html#documents",
    "href": "tutorials/reproducibility/workflows.html#documents",
    "title": "Images & Figures",
    "section": "Documents",
    "text": "Documents\nInclude a pre-rendered HTML files as part of this webpage.\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  \n\n\n\narrange {dplyr}\nR Documentation\n\n\n\n\n\n  Order rows using column values\n\n  Description\n\n  \n  \n\n  Usage\n\n  arrange(.data, ..., .by_group = FALSE)\n\n## S3 method for class 'data.frame'\narrange(.data, ..., .by_group = FALSE, .locale = NULL)\n\n  Arguments\n\n  \n\n\n\n\n\n\n\n.data\nA data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.\n\n\n...\n&lt;data-masking&gt; Variables, or functions of variables. Use desc() to sort a variable in descending order.\n\n\n.by_group\nIf TRUE, will sort first by grouping variable. Applies togrouped data frames only.\n\n\n.locale\nThe locale to sort character vectors in.\n\nIf NULL, the default, uses the \"C\" locale unless the dplyr.legacy_locale global option escape hatch is active. See the dplyr-locale help page for more details.\nIf a single string from stringi::stri_locale_list() is supplied, then this will be used as the locale to sort with. For example, \"en\" will sort with the American English locale. This requires the stringi package.\nIf \"C\" is supplied, then character vectors will always be sorted in the C locale. This does not require stringi and is often much faster than supplying a locale identifier.\n\nThe C locale is not the same as English locales, such as \"en\", particularly when it comes to data containing a mix of upper and lower case letters. This is explained in more detail on the locale help page under the ⁠Default locale⁠ section.\n\n\n\n\n\n  Details\n\n  Missing values\n\n  \n\n  \n    \n       always sorted to the end for local data, even when wrapped with desc().\n    \n    \n       treated differently for remote data, depending on the backend.\n    \n  \n\n  Value\n\n  \n\n  \n    \n       All rows appear in the output, but (usually) in a different place.\n    \n    \n       Columns are not modified.\n    \n    \n       Groups are not modified.\n    \n    \n       Data frame attributes are preserved.\n    \n  \n\n  Methods\n\n  \n  \n\n  See Also\n\n  \n\n  Examples\n\n  arrange(mtcars, cyl, disp)\narrange(mtcars, desc(disp))\n\n# grouped arrange ignores groups\nby_cyl &lt;- mtcars %&gt;% group_by(cyl)\nby_cyl %&gt;% arrange(desc(wt))\n# Unless you specifically ask:\nby_cyl %&gt;% arrange(desc(wt), .by_group = TRUE)\n\n# use embracing when wrapping in a function;\n# see ?rlang::args_data_masking for more details\ntidy_eval_arrange &lt;- function(.data, var) {\n  .data %&gt;%\n    arrange({{ var }})\n}\ntidy_eval_arrange(mtcars, mpg)\n\n# Use `across()` or `pick()` to select columns with tidy-select\niris %&gt;% arrange(pick(starts_with(\"Sepal\")))\niris %&gt;% arrange(across(starts_with(\"Sepal\"), desc))",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility",
      "Images & Figures"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/index.html",
    "href": "tutorials/reproducibility/index.html",
    "title": "First Tutorial",
    "section": "",
    "text": "This is the landing page for the first tutorial. Each tutorial section should begin with a landing page named “index.qmd”.",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility"
    ]
  },
  {
    "objectID": "tutorials/reproducibility/index.html#headings",
    "href": "tutorials/reproducibility/index.html#headings",
    "title": "First Tutorial",
    "section": "Headings",
    "text": "Headings\nThe title field of each QMD source file is typeset as a Level 1 heading, so use Level-2 headings as the highest heading level in your markdown.",
    "crumbs": [
      "Open-Stat-Prog",
      "Reproducibility"
    ]
  },
  {
    "objectID": "tutorials/quarto_markdown/topic3.html",
    "href": "tutorials/quarto_markdown/topic3.html",
    "title": "Images & Figures",
    "section": "",
    "text": "This is the third topic file for Tutorial 1.\narrange() orders the rows of a data frame by the values of selected columns.\nUnlike other dplyr verbs, arrange() largely ignores grouping; you need to explicitly mention grouping\n    variables (or use  .by_group = TRUE) in order to group by them, and functions of variables are\n    evaluated once per data frame, not once per group.\nUnlike base sorting with sort(), NA are:\nAn object of the same type as .data. The output has the following properties:\nThis function is a generic, which means that packages can provide implementations (methods) for\n    other classes. See the documentation of individual methods for extra arguments and differences in behaviour.\nThe following methods are currently available in loaded packages: no methods found.\nOther single table verbs: \n    filter(),\n    mutate(),\n    reframe(),\n    rename(),\n    select(),\n    slice(),\n    summarise()"
  },
  {
    "objectID": "tutorials/quarto_markdown/topic3.html#assets-directory",
    "href": "tutorials/quarto_markdown/topic3.html#assets-directory",
    "title": "Images & Figures",
    "section": "Assets Directory",
    "text": "Assets Directory\nAll pre-rendered assets (i.e., files that will not rendered/compiled into some other format) that you want to include in your website should live somewhere in the “/assets/” directory.\n\n/assets/images/: Image files\n/assets/figures/: Scientific figures (e.g., graphs, plots, diagrams)\n/assets/docs/: Pre-rendered documents (e.g., HTML)"
  },
  {
    "objectID": "tutorials/quarto_markdown/topic3.html#images",
    "href": "tutorials/quarto_markdown/topic3.html#images",
    "title": "Images & Figures",
    "section": "Images",
    "text": "Images\n\n\n\nA Nice Mountain View"
  },
  {
    "objectID": "tutorials/quarto_markdown/topic3.html#figures",
    "href": "tutorials/quarto_markdown/topic3.html#figures",
    "title": "Images & Figures",
    "section": "Figures",
    "text": "Figures\n\n\n\nSerial Multiple Mediation"
  },
  {
    "objectID": "tutorials/quarto_markdown/topic3.html#documents",
    "href": "tutorials/quarto_markdown/topic3.html#documents",
    "title": "Images & Figures",
    "section": "Documents",
    "text": "Documents\nInclude a pre-rendered HTML files as part of this webpage.\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  \n\n\n\narrange {dplyr}\nR Documentation\n\n\n\n\n\n  Order rows using column values\n\n  Description\n\n  \n  \n\n  Usage\n\n  arrange(.data, ..., .by_group = FALSE)\n\n## S3 method for class 'data.frame'\narrange(.data, ..., .by_group = FALSE, .locale = NULL)\n\n  Arguments\n\n  \n\n\n\n\n\n\n\n.data\nA data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.\n\n\n...\n&lt;data-masking&gt; Variables, or functions of variables. Use desc() to sort a variable in descending order.\n\n\n.by_group\nIf TRUE, will sort first by grouping variable. Applies togrouped data frames only.\n\n\n.locale\nThe locale to sort character vectors in.\n\nIf NULL, the default, uses the \"C\" locale unless the dplyr.legacy_locale global option escape hatch is active. See the dplyr-locale help page for more details.\nIf a single string from stringi::stri_locale_list() is supplied, then this will be used as the locale to sort with. For example, \"en\" will sort with the American English locale. This requires the stringi package.\nIf \"C\" is supplied, then character vectors will always be sorted in the C locale. This does not require stringi and is often much faster than supplying a locale identifier.\n\nThe C locale is not the same as English locales, such as \"en\", particularly when it comes to data containing a mix of upper and lower case letters. This is explained in more detail on the locale help page under the ⁠Default locale⁠ section.\n\n\n\n\n\n  Details\n\n  Missing values\n\n  \n\n  \n    \n       always sorted to the end for local data, even when wrapped with desc().\n    \n    \n       treated differently for remote data, depending on the backend.\n    \n  \n\n  Value\n\n  \n\n  \n    \n       All rows appear in the output, but (usually) in a different place.\n    \n    \n       Columns are not modified.\n    \n    \n       Groups are not modified.\n    \n    \n       Data frame attributes are preserved.\n    \n  \n\n  Methods\n\n  \n  \n\n  See Also\n\n  \n\n  Examples\n\n  arrange(mtcars, cyl, disp)\narrange(mtcars, desc(disp))\n\n# grouped arrange ignores groups\nby_cyl &lt;- mtcars %&gt;% group_by(cyl)\nby_cyl %&gt;% arrange(desc(wt))\n# Unless you specifically ask:\nby_cyl %&gt;% arrange(desc(wt), .by_group = TRUE)\n\n# use embracing when wrapping in a function;\n# see ?rlang::args_data_masking for more details\ntidy_eval_arrange &lt;- function(.data, var) {\n  .data %&gt;%\n    arrange({{ var }})\n}\ntidy_eval_arrange(mtcars, mpg)\n\n# Use `across()` or `pick()` to select columns with tidy-select\niris %&gt;% arrange(pick(starts_with(\"Sepal\")))\niris %&gt;% arrange(across(starts_with(\"Sepal\"), desc))"
  },
  {
    "objectID": "tutorials/quarto_markdown/topic1.html",
    "href": "tutorials/quarto_markdown/topic1.html",
    "title": "Code Blocks",
    "section": "",
    "text": "This is the first topic file for Tutorial 1."
  },
  {
    "objectID": "tutorials/quarto_markdown/topic1.html#code-blocks",
    "href": "tutorials/quarto_markdown/topic1.html#code-blocks",
    "title": "Code Blocks",
    "section": "Code Blocks",
    "text": "Code Blocks\nUse knitr code blocks to include non-interactive R code.\n\n## Add 2 and 2\n2 + 2\n\n[1] 4\n\n## Divide 225 by 15 and print the result\n(x &lt;- 225 / 15)\n\n[1] 15\n\n\nUse quarto-webr code blocks for interactive R exercises.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCode Block Environments\nA single execution environment is shared across code blocks of the same type.\n\nAll the knitr code blocks in a QMD file will share an evaluation environment.\nLikewise for the quarto-webr code blocks\n\n\nx^2\n\n[1] 225\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nknitr and quarto-webr code blocks to not share the same environment, though.\n\nresid(fit)\n\nError: object 'fit' not found\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf you want to share objects across code chunk types (e.g., to pose a practice problem using objects created in a knitr chunk), you can regenerate the required objects using a hidden code chunk of the appropriate type.\n\nDon’t forget to set an appropriate seed, if you’re trying to regenerate a stochastic object.\n\n\n\nInline Code\nUse knitr inline code chunks to embed R output in text blocks.\n\nE.g., R says the squareroot of 2 is 1.4142136."
  },
  {
    "objectID": "tutorials/quarto_markdown/documents.html",
    "href": "tutorials/quarto_markdown/documents.html",
    "title": "Creating different documents with Quarto",
    "section": "",
    "text": "Quarto enables you to create a wide range of professional documents and presentations directly from RStudio. It builds on Markdown to combine code, text, and visualizations into a single reproducible workflow. This section introduces the basics of creating Quarto files, then explores the unique features and challenges of producing reports and presentations.\n\nBasics: Working with Quarto in RStudio\nRStudio provides an integrated environment for writing and rendering Quarto documents. To start a new project:\n\nGo to File → New File → Quarto Document…\nIn the dialog box, enter a title, author, and choose the default output format (e.g., HTML, PDF, or Word).\nRStudio will create a .qmd file containing a template YAML header and example code chunk.\nClick Render (or use Render on Save) to produce the formatted output.\n\n\n\n\nRStudio Quarto new document dialog (source: https://quarto.org)\n\n\n\n\n\n\n\n\nReading\n\n\n\nThe screenshot above shows where to create new Quarto documents in RStudio. For more information, see the official Quarto documentation: 🔗 Authoring with RStudio – Quarto Documentation\n\n\nA quarto file consists of:\n\nA YAML header (between --- lines) defining metadata like title, author, date, and output type.\nThe body, written in Markdown syntax, possibly including embedded R code chunks using {r} blocks.\nOptional format-specific settings for output style and behavior.\n\nOf course — here’s a concise, textbook-style paragraph explaining YAML in the context of Quarto and RStudio:\n\n\n\nYAML: Document Metadata and Configuration\nAt the top of every Quarto (.qmd) document is a section written in YAML (short for “YAML Ain’t Markup Language”). YAML provides a structured way to define metadata, such as information about the document like the title, author, date, and output format. It also controls global document options like table of contents, numbering, themes, or code execution settings. YAML uses a simple key–value structure, enclosed between three dashes (---) at the beginning and end of the block. For example:\n---\ntitle: \"Statistical Analysis of Air Quality Data\"\nauthor: \"Alex Rivera\"\ndate: \"2025-01-01\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n---\nIn this example, YAML instructs Quarto to render the document as an HTML report with a table of contents and collapsible code sections. While the Markdown and R layers handle what is written and how it’s computed, YAML defines how the entire document is presented and configured.\n\n\nLanguage Layer\nThe language layer defines the written structure and formatting of a document using Markdown syntax. Markdown provides a simple and readable way to organize content through headings, lists, emphasis, links, and tables. It focuses entirely on text and structure, not on data or computation. In a Quarto document, this layer represents the narrative: the words, explanations, and organization that frame the analysis.\nExample (Markdown text):\n# Results and Discussion\n\nIn this section, we summarize the findings from our dataset.  \nThe following figure illustrates the relationship between fuel efficiency and engine power.\n\n- Data collected from the *mtcars* dataset  \n- Variables analyzed: **mpg** (miles per gallon) and **hp** (horsepower)\nThis text defines structure and emphasis but does not perform any computation.\n\n\nComputation Layer\nThe computation layer carries out the actual data analysis and visualization. It involves embedding executable R code chunks inside the Markdown document, allowing results, tables, and figures to be generated automatically when the document is rendered. This integration ensures that all output is reproducible — every number and plot reflects the latest version of the data and analysis.\nExample (R code chunk):\n\n# Create a scatterplot of mpg vs horsepower\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = hp, y = mpg)) +\n  geom_point(color = \"steelblue\") +\n  labs(title = \"Fuel Efficiency vs Engine Power\",\n       x = \"Horsepower (hp)\",\n       y = \"Miles per Gallon (mpg)\")\n\n\n\n\n\n\n\n\nWhen rendered through Quarto, this code runs in R, producing a plot that appears directly in the final document or presentation.\n\n\nCreating Quarto Documents (Reports, Articles, and Papers)\nQuarto supports a variety of document-based outputs, such as research reports, academic papers, and technical documentation. Common formats include:\n\n\n\n\n\n\n\n\nFormat\nOutput Type\nTypical Use\n\n\n\n\nhtml\nInteractive web report\nExploratory data reports, dashboards\n\n\npdf\nPrint-quality report\nAcademic papers, formatted submissions\n\n\ndocx\nMicrosoft Word\nEditable reports for collaboration\n\n\nepub\ne-book\nLong-form reading materials\n\n\n\nTo create a document, specify the format in the YAML header:\n---\ntitle: \"Analysis Report\"\nauthor: \"Student Name\"\nformat:\n  html:\n    toc: true\n    number-sections: true\n---\nQuarto automatically executes embedded R code chunks and inserts the resulting tables and plots. This enables reproducible research — every time you re-render, the analysis and visuals update from your current data.\nUnique challenges and considerations for documents:\n\nLayout and length: Reports may require page breaks, consistent figure sizing, and control over floating tables.\nPDF rendering: Requires a working LaTeX installation (e.g., TinyTeX).\nCross-format consistency: Settings that work for HTML might not suit PDF or Word outputs.\nCitations and cross-references: Quarto supports citation management via BibTeX, but setup requires care.\n\n\n\n\n\n\n\n\n\nReading\n\n\n\nLearn more: Quarto Document Formats\n\n\n\n\nCreating Quarto Presentations (Slides and Talks)\nQuarto also allows you to create presentations directly from .qmd files. Presentations use the same structure as documents but render slide-by-slide instead of page-by-page. You can choose from several output types:\n\n\n\n\n\n\n\n\n\nPresentation Format\nOutput Type\nStrengths\nChallenges\n\n\n\n\nrevealjs\nHTML slides\nHighly flexible; supports transitions, incremental reveals, and embedded code or interactivity.\nRequires attention to screen layout and readability; web-based only.\n\n\npptx\nPowerPoint\nEasy to share; editable after rendering.\nLimited styling and dynamic features compared to HTML slides.\n\n\nbeamer\nPDF slides (LaTeX)\nHigh-quality printable slides; ideal for academic talks.\nComplex LaTeX configuration; limited interactivity.\n\n\n\n\n\nExample: Creating a Reveal.js Presentation\nBelow is an example of a simple Quarto presentation using the Reveal.js format.\nThe YAML header defines document metadata and output type, while the Markdown body defines the slide content.\n\nExample .qmd file\nResuling .html output file\n\nEach slide begins with a heading (for example, ##) or is separated using ---. When rendered, Quarto executes any embedded R code chunks and displays their outputs, such as tables or plots, directly on the slides.\nStudents should keep slides concise: aim for clarity, minimal text, and meaningful visuals rather than dense explanations.\nCommon challenges for presentations:\n\nBalancing detail and readability: Avoid overloading slides with text or long code blocks.\nConsistent design: Use concise titles and uniform font sizes.\nFile size: Embedded plots can increase file size; consider image compression.\nCross-platform compatibility: Check that Reveal.js slides display correctly across browsers; PowerPoint (pptx) outputs may render differently.\n\n\n\n\n\n\n\n\n\n\n\nReading\n\n\n\nLearn more: Quarto Presentations Overview Reveal.js Presentations in Quarto PowerPoint Presentations in Quarto\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Quarto and Markdown",
      "Creating different documents with Quarto"
    ]
  },
  {
    "objectID": "tutorials/quarto_markdown/purpose.html",
    "href": "tutorials/quarto_markdown/purpose.html",
    "title": "The purpose of Markdown and Quarto",
    "section": "",
    "text": "Before learning how to create documents and reports, it is important to understand the two core technologies behind this workflow: Quarto and Markdown. These tools form the foundation for reproducible, flexible, and professional document creation.",
    "crumbs": [
      "Open-Stat-Prog",
      "Quarto and Markdown",
      "The purpose of Markdown and Quarto"
    ]
  },
  {
    "objectID": "tutorials/quarto_markdown/purpose.html#introduction-to-quarto-and-markdown",
    "href": "tutorials/quarto_markdown/purpose.html#introduction-to-quarto-and-markdown",
    "title": "The purpose of Markdown and Quarto",
    "section": "",
    "text": "Before learning how to create documents and reports, it is important to understand the two core technologies behind this workflow: Quarto and Markdown. These tools form the foundation for reproducible, flexible, and professional document creation.",
    "crumbs": [
      "Open-Stat-Prog",
      "Quarto and Markdown",
      "The purpose of Markdown and Quarto"
    ]
  },
  {
    "objectID": "tutorials/quarto_markdown/purpose.html#what-is-quarto",
    "href": "tutorials/quarto_markdown/purpose.html#what-is-quarto",
    "title": "The purpose of Markdown and Quarto",
    "section": "What Is Quarto?",
    "text": "What Is Quarto?\nQuarto is an open-source publishing system designed to create high-quality, reproducible documents and websites from plain text files. It allows you to combine written content, code, data, and visualizations in a single workflow.\nQuarto supports multiple programming languages—such as R, Python, Julia, and Observable—and can produce outputs in a variety of formats, including HTML, PDF, Microsoft Word, and PowerPoint.\nBecause Quarto integrates writing and computation, it is particularly well-suited for:\n\nData science reports Research papers and technical documentation\nEducational materials and presentations\nReproducible workflows and analysis pipelines\n\nIn short, Quarto bridges the gap between writing and computation, helping you communicate results in a clear and automated way.\n\n\n\n\n\n\n\n\nReading\n\n\n\nFor official documentation, installation instructions, and tutorials, see the Quarto website.",
    "crumbs": [
      "Open-Stat-Prog",
      "Quarto and Markdown",
      "The purpose of Markdown and Quarto"
    ]
  },
  {
    "objectID": "tutorials/quarto_markdown/purpose.html#what-is-markdown",
    "href": "tutorials/quarto_markdown/purpose.html#what-is-markdown",
    "title": "The purpose of Markdown and Quarto",
    "section": "What is Markdown?",
    "text": "What is Markdown?\nMarkdown is a lightweight text formatting language. It allows you to write plain text that can be easily converted into formatted documents such as web pages or PDFs.\nInstead of relying on graphical formatting tools (like bold or italic buttons), Markdown uses simple text-based markers that represent formatting instructions. The result is a writing experience that is both human-readable and machine-friendly.\nMarkdown was originally created by John Gruber in 2004 with the goal of making writing for the web more accessible and less cluttered by code-like markup languages such as HTML.\nMarkdown has since become a standard tool for technical communication, documentation, and note-taking, forming the foundation of many modern publishing systems — including Quarto.\n\n\n\n\n\n\n\n\n\n\nReading\n\n\n\nHere you find the link to the original Markdown paper.",
    "crumbs": [
      "Open-Stat-Prog",
      "Quarto and Markdown",
      "The purpose of Markdown and Quarto"
    ]
  },
  {
    "objectID": "tutorials/writing_text/index.html",
    "href": "tutorials/writing_text/index.html",
    "title": "First Tutorial",
    "section": "",
    "text": "This is the landing page for the first tutorial. Each tutorial section should begin with a landing page named “index.qmd”.",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text"
    ]
  },
  {
    "objectID": "tutorials/writing_text/index.html#headings",
    "href": "tutorials/writing_text/index.html#headings",
    "title": "First Tutorial",
    "section": "Headings",
    "text": "Headings\nThe title field of each QMD source file is typeset as a Level 1 heading, so use Level-2 headings as the highest heading level in your markdown.",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text"
    ]
  },
  {
    "objectID": "tutorials/writing_text/structure.html",
    "href": "tutorials/writing_text/structure.html",
    "title": "Divs & Callouts",
    "section": "",
    "text": "This is the second topic file for Tutorial 1.",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/writing_text/structure.html#callout-blocks",
    "href": "tutorials/writing_text/structure.html#callout-blocks",
    "title": "Divs & Callouts",
    "section": "Callout Blocks",
    "text": "Callout Blocks\nUse callout blocks to highlight special information.\n\n\n\n\n\n\nNote Title\n\n\n\nSomething noteworthy.\n\n\n\n\n\n\n\n\nTip Title\n\n\n\nHere’s a tip for ya…\n\n\n\n\n\n\n\n\nImportant Title\n\n\n\nThis is very important!\n\n\n\n\n\n\n\n\nWarning Title\n\n\n\nYou’ve been warned.\n\n\n\n\n\n\n\n\nCaution Title\n\n\n\nProceed with caution.\n\n\n\nCustom Callouts\nThis project uses the quarto-custom-callout extension to provide some bespoke callout blocks. This template already defines four such blocks.\nA reading callout to highlight relevant, recommended literature.\n\nI.e., These sources would be the required reading in a classroom context.\n\n\n\n\n\n\n\nReading\n\n\n\nR4DS 2: Workflow Basics\n\n\nA reading-advanced callout to highlight relevant, but technically challanging, literature.\n\nI.e., These sources would be supplementary reference materials but not required reading in a classroom context.\n\n\n\n\n\n\n\nAdvanced Reading\n\n\n\nAdvanced R 2.2: Binding Basics\n\n\nA resource callout to highlight related external resources.\n\n\n\n\n\n\nExternal Resources\n\n\n\nFor a different take on these ideas, check out Andrew Heiss’ R Primers tutorial on the topic\n\nR Primers: Programming Basics\n\n\n\n\n\nPractice Callouts\nThe custom practice callout is reserved for inline practice problems.\n\nThe panel-tabset div nested within the practice div creates a set of tabs to organize the exercise components.\nEach Level 2 heading inside the panel-tabset div defines a new tab.\n\nIn the examples below, the tab titles are specified through quarto shortcode variables.\nThese variables are defined in the _variables.yml metadata file.\n\n\n\n\n\n\n\n\nExample Code Exercise\n\n\n\n\nRegress Petal.Width onto Species using the iris dataset.\nCreate a normal Q-Q plot of the residuals.\n\n\n Interactive Editor Hint Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRemember what happens when you call the Base R plot() function on a fitted lm object.\n\n\n\nFirst, we’ll use the lm() function to estimate the model.\n\n\nfit1 &lt;- lm(Petal.Width ~ Species, data = iris)\n\n\nThen, we’ll use the default plotting method for lm objects to create the Q-Q plot.\n\n\nplot(fit1, 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Theory Question\n\n\n\n\n Question Solution\n\n\nWhat is the answer to life, the universe, and everything?\n\n\n42",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/writing_text/structure.html#using-the-website-margin",
    "href": "tutorials/writing_text/structure.html#using-the-website-margin",
    "title": "Divs & Callouts",
    "section": "Using the Website Margin",
    "text": "Using the Website Margin\nIn the previous section, all callout blocks are placed in the website body. In most cases, however, callout blocks are better placed in the website margin.\n\nPlacing supporting elements like links, callouts, and references in the margin streamlines the main body content while keeping the supporting information near the relevant main body content.\n\nTo place content in the website margine, we use the column-margin div.\n\nExample\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi gravida bibendum ex, quis cursus risus vestibulum vel. Aliquam hendrerit in enim in suscipit. Nunc at fringilla velit, a faucibus tellus. Etiam mollis, massa id finibus volutpat, tellus nulla egestas mauris, id tempus sem ipsum quis neque. Pellentesque sodales pharetra nulla id sodales. Vestibulum tincidunt orci in sem malesuada, in malesuada odio lacinia. Integer sodales, quam eu imperdiet commodo, est ipsum interdum risus, et volutpat mi justo blandit est. Donec non nisl lobortis, vestibulum lorem non, iaculis felis. Curabitur tempus sagittis volutpat. Nam dignissim eros ac gravida ultricies. Curabitur velit nisl, cursus in lobortis id, porttitor in massa. Vestibulum commodo, turpis vitae laoreet efficitur, diam sem consectetur felis, non pulvinar magna elit id justo. Duis tincidunt id massa eget lacinia.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n\nNam vulputate tellus metus, id pretium nisi congue eu. Ut ornare, sem id cursus suscipit, dui purus efficitur urna, id auctor magna diam quis lorem. Cras venenatis id dui at rhoncus. Donec consequat nulla vel arcu vestibulum, ac posuere leo venenatis. Praesent fermentum est ac lorem condimentum, gravida volutpat velit sagittis. Cras ac egestas nisi. Duis eget luctus quam. Donec consectetur neque nec egestas ultricies.\n\n\n\n\n\n\n\n\n\n\nExternal Resources\n\n\n\nWikipedia: Central Limit Theorem",
    "crumbs": [
      "Open-Stat-Prog",
      "Writing text",
      "Divs & Callouts"
    ]
  },
  {
    "objectID": "tutorials/presenting_output/index.html",
    "href": "tutorials/presenting_output/index.html",
    "title": "First Tutorial",
    "section": "",
    "text": "This is the landing page for the first tutorial. Each tutorial section should begin with a landing page named “index.qmd”.",
    "crumbs": [
      "Open-Stat-Prog",
      "Presenting output"
    ]
  },
  {
    "objectID": "tutorials/presenting_output/index.html#headings",
    "href": "tutorials/presenting_output/index.html#headings",
    "title": "First Tutorial",
    "section": "Headings",
    "text": "Headings\nThe title field of each QMD source file is typeset as a Level 1 heading, so use Level-2 headings as the highest heading level in your markdown.",
    "crumbs": [
      "Open-Stat-Prog",
      "Presenting output"
    ]
  },
  {
    "objectID": "tutorials/chunk_options/create_chunks.html",
    "href": "tutorials/chunk_options/create_chunks.html",
    "title": "Second Topic",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\nNunc ac dignissim magna. Vestibulum vitae egestas elit. Proin feugiat leo quis ante condimentum, eu ornare mauris feugiat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris cursus laoreet ex, dignissim bibendum est posuere iaculis. Suspendisse et maximus elit. In fringilla gravida ornare. Aenean id lectus pulvinar, sagittis felis nec, rutrum risus. Nam vel neque eu arcu blandit fringilla et in quam. Aliquam luctus est sit amet vestibulum eleifend. Phasellus elementum sagittis molestie. Proin tempor lorem arcu, at condimentum purus volutpat eu. Fusce et pellentesque ligula. Pellentesque id tellus at erat luctus fringilla. Suspendisse potenti.\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Chunks and options",
      "Second Topic"
    ]
  },
  {
    "objectID": "tutorials/chunk_options/index.html",
    "href": "tutorials/chunk_options/index.html",
    "title": "Second Tutorial",
    "section": "",
    "text": "This is the landing page for the second tutorial.",
    "crumbs": [
      "Open-Stat-Prog",
      "Chunks and options"
    ]
  },
  {
    "objectID": "tutorials/chunk_options/index.html#blah",
    "href": "tutorials/chunk_options/index.html#blah",
    "title": "Second Tutorial",
    "section": "Blah",
    "text": "Blah\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n\nBlah, Blah\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\nNunc ac dignissim magna. Vestibulum vitae egestas elit. Proin feugiat leo quis ante condimentum, eu ornare mauris feugiat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris cursus laoreet ex, dignissim bibendum est posuere iaculis. Suspendisse et maximus elit. In fringilla gravida ornare. Aenean id lectus pulvinar, sagittis felis nec, rutrum risus. Nam vel neque eu arcu blandit fringilla et in quam. Aliquam luctus est sit amet vestibulum eleifend. Phasellus elementum sagittis molestie. Proin tempor lorem arcu, at condimentum purus volutpat eu. Fusce et pellentesque ligula. Pellentesque id tellus at erat luctus fringilla. Suspendisse potenti.",
    "crumbs": [
      "Open-Stat-Prog",
      "Chunks and options"
    ]
  },
  {
    "objectID": "assets/docs/presentation_example.html#about-the-data",
    "href": "assets/docs/presentation_example.html#about-the-data",
    "title": "Example presentation",
    "section": "About the Data",
    "text": "About the Data\nWe’ll use the built-in mtcars dataset to explore the relationship between horsepower (hp) and fuel efficiency (mpg).\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"
  },
  {
    "objectID": "assets/docs/presentation_example.html#visualizing-the-relationship",
    "href": "assets/docs/presentation_example.html#visualizing-the-relationship",
    "title": "Example presentation",
    "section": "Visualizing the Relationship",
    "text": "Visualizing the Relationship\n\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = hp, y = mpg)) +\n  geom_point(color = \"steelblue\", size = 3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"darkorange\") +\n  labs(title = \"Fuel Efficiency vs Horsepower\",\n       x = \"Horsepower (hp)\",\n       y = \"Miles per Gallon (mpg)\")"
  },
  {
    "objectID": "assets/docs/presentation_example.html#interpretation",
    "href": "assets/docs/presentation_example.html#interpretation",
    "title": "Example presentation",
    "section": "Interpretation",
    "text": "Interpretation\n\nCars with higher horsepower generally have lower fuel efficiency.\nThe trend line shows a clear negative correlation between the two variables.\nSuch visualizations can support discussions in reports and presentations."
  },
  {
    "objectID": "assets/docs/presentation_example.html#summary",
    "href": "assets/docs/presentation_example.html#summary",
    "title": "Example presentation",
    "section": "Summary",
    "text": "Summary\n\nMarkdown provides the structure and narrative.\nR executes the analysis and visualization.\nQuarto integrates both to produce polished slides.\n\nLearn more: Reveal.js Presentations in Quarto"
  },
  {
    "objectID": "quizzes/second_tutorial/questions/default_arguments2.html",
    "href": "quizzes/second_tutorial/questions/default_arguments2.html",
    "title": "Question",
    "section": "",
    "text": "Use the following help file excerpt to answer the question below.\n\n\n\n\n\n\n\n\ncor\nR Documentation\n\n\n\n\n\n\n\n\n\nvar(x, y = NULL, na.rm = FALSE, use)\n\ncov(x, y = NULL, use = \"everything\",\n    method = c(\"pearson\", \"kendall\", \"spearman\"))\n\ncor(x, y = NULL, use = \"everything\",\n    method = c(\"pearson\", \"kendall\", \"spearman\"))\n\ncov2cor(V)\n\n\n\n\n\n\n\n\nWhat is the default value for the use argument of the cor() function?\n\n\n\n\"everything\"\n\"Everything\n\"spearman\"\n\"pearson\"\n\"kendall\"\nc(\"pearson\", \"spearman\", \"kendall\")\nNULL\nmethod\ny\nx\nThe use argument does not have a defined default value."
  },
  {
    "objectID": "quizzes/second_tutorial/questions/default_arguments2.html#answerlist",
    "href": "quizzes/second_tutorial/questions/default_arguments2.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "\"everything\"\n\"Everything\n\"spearman\"\n\"pearson\"\n\"kendall\"\nc(\"pearson\", \"spearman\", \"kendall\")\nNULL\nmethod\ny\nx\nThe use argument does not have a defined default value."
  },
  {
    "objectID": "quizzes/second_tutorial/questions/default_arguments2.html#answerlist-1",
    "href": "quizzes/second_tutorial/questions/default_arguments2.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nCorrect\nWrong: The “E” should be lowercase\nWrong: This is one of the possible methods\nWrong: This is one of the possible methods\nWrong: This is one of the possible methods\nWrong: These are all of the possible methods\nWrong: This is the default value for y\nWrong: This is an argument name\nWrong: This is an argument name\nWrong: This is an argument name\nWrong: There is a default value defined for use."
  },
  {
    "objectID": "quizzes/second_tutorial/questions/arithmetic2.html",
    "href": "quizzes/second_tutorial/questions/arithmetic2.html",
    "title": "Question",
    "section": "",
    "text": "Question\nWhat is the value of \\(x\\) in the following equation?\n\\[\nx = \\frac{4 + 4}{5}\n\\]\nRound your answer to two decimal places.\n\n\nSolution\nAfter rounding, we get 1.60.\n\n\nMeta-information\nexname: Arithmetic extype: num exsolution: 1.60 extol: 0.01\n\n\n\n\n Back to top"
  },
  {
    "objectID": "quizzes/first_tutorial/questions/bad_question.html",
    "href": "quizzes/first_tutorial/questions/bad_question.html",
    "title": "Question",
    "section": "",
    "text": "Yes or No?\n\n\n\nYes\nYes\nYes\nYes\nYes\nNo\nNo\nNo\nNo\nNo"
  },
  {
    "objectID": "quizzes/first_tutorial/questions/bad_question.html#answerlist",
    "href": "quizzes/first_tutorial/questions/bad_question.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "Yes\nYes\nYes\nYes\nYes\nNo\nNo\nNo\nNo\nNo"
  },
  {
    "objectID": "quizzes/first_tutorial/questions/bad_question.html#answerlist-1",
    "href": "quizzes/first_tutorial/questions/bad_question.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nCorrect\nWrong\nWrong\nWrong\nWrong\nWrong\nWrong\nWrong\nWrong\nWrong"
  }
]